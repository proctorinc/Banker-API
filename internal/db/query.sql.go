// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const countAccounts = `-- name: CountAccounts :one
SELECT count(id) FROM accounts AS a
WHERE ownerId = $1
`

func (q *Queries) CountAccounts(ctx context.Context, ownerid uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAccounts, ownerid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countBudgetFunds = `-- name: CountBudgetFunds :one
SELECT count(id) FROM funds AS a
WHERE ownerId = $1 AND type = 'BUDGET'
`

func (q *Queries) CountBudgetFunds(ctx context.Context, ownerid uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countBudgetFunds, ownerid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countFundAllocationsByFundId = `-- name: CountFundAllocationsByFundId :many
SELECT count(a.id), f.id as fundId FROM fund_allocations AS a, funds AS f
WHERE a.fundId = f.id
    AND f.id::varchar = ANY($1::varchar[])
GROUP BY f.id
`

type CountFundAllocationsByFundIdRow struct {
	Count  int64
	Fundid uuid.UUID
}

func (q *Queries) CountFundAllocationsByFundId(ctx context.Context, fundids []string) ([]CountFundAllocationsByFundIdRow, error) {
	rows, err := q.db.QueryContext(ctx, countFundAllocationsByFundId, pq.Array(fundids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CountFundAllocationsByFundIdRow
	for rows.Next() {
		var i CountFundAllocationsByFundIdRow
		if err := rows.Scan(&i.Count, &i.Fundid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const countIncomeTransactions = `-- name: CountIncomeTransactions :one
SELECT count(t.id) as merchantId FROM transactions AS t
WHERE ownerId = $1
    AND amount >= 0
    AND date BETWEEN $2 AND $3
`

type CountIncomeTransactionsParams struct {
	Ownerid   uuid.UUID
	Startdate time.Time
	Enddate   time.Time
}

func (q *Queries) CountIncomeTransactions(ctx context.Context, arg CountIncomeTransactionsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countIncomeTransactions, arg.Ownerid, arg.Startdate, arg.Enddate)
	var merchantid int64
	err := row.Scan(&merchantid)
	return merchantid, err
}

const countMerchants = `-- name: CountMerchants :one
SELECT count(id) FROM merchants
WHERE ownerId = $1
`

func (q *Queries) CountMerchants(ctx context.Context, ownerid uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countMerchants, ownerid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSavingsFunds = `-- name: CountSavingsFunds :one
SELECT count(id) FROM funds AS a
WHERE ownerId = $1 AND type = 'SAVINGS'
`

func (q *Queries) CountSavingsFunds(ctx context.Context, ownerid uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSavingsFunds, ownerid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSpendingTransactions = `-- name: CountSpendingTransactions :one
SELECT count(t.id) as merchantId FROM transactions AS t
WHERE ownerId = $1
    AND amount < 0
    AND date BETWEEN $2 AND $3
`

type CountSpendingTransactionsParams struct {
	Ownerid   uuid.UUID
	Startdate time.Time
	Enddate   time.Time
}

func (q *Queries) CountSpendingTransactions(ctx context.Context, arg CountSpendingTransactionsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSpendingTransactions, arg.Ownerid, arg.Startdate, arg.Enddate)
	var merchantid int64
	err := row.Scan(&merchantid)
	return merchantid, err
}

const countTransactions = `-- name: CountTransactions :one
SELECT count(id) FROM transactions AS a
WHERE ownerId = $1
`

func (q *Queries) CountTransactions(ctx context.Context, ownerid uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTransactions, ownerid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTransactionsByAccountIds = `-- name: CountTransactionsByAccountIds :many
SELECT count(t.id), a.id as accountId FROM transactions AS t, accounts AS a
WHERE t.accountId = a.id
    AND a.id::varchar = ANY($1::varchar[])
GROUP BY a.id
`

type CountTransactionsByAccountIdsRow struct {
	Count     int64
	Accountid uuid.UUID
}

func (q *Queries) CountTransactionsByAccountIds(ctx context.Context, accountids []string) ([]CountTransactionsByAccountIdsRow, error) {
	rows, err := q.db.QueryContext(ctx, countTransactionsByAccountIds, pq.Array(accountids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CountTransactionsByAccountIdsRow
	for rows.Next() {
		var i CountTransactionsByAccountIdsRow
		if err := rows.Scan(&i.Count, &i.Accountid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const countTransactionsByDates = `-- name: CountTransactionsByDates :one
SELECT count(id) FROM transactions AS a
WHERE ownerId = $1 AND date BETWEEN $2 AND $3
`

type CountTransactionsByDatesParams struct {
	Ownerid   uuid.UUID
	Startdate time.Time
	Enddate   time.Time
}

func (q *Queries) CountTransactionsByDates(ctx context.Context, arg CountTransactionsByDatesParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTransactionsByDates, arg.Ownerid, arg.Startdate, arg.Enddate)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTransactionsByMerchantIds = `-- name: CountTransactionsByMerchantIds :many
SELECT count(t.id), m.id as merchantId FROM transactions AS t, merchants AS m
WHERE t.merchantId = m.id
    AND m.id::varchar = ANY($1::varchar[])
GROUP BY m.id
`

type CountTransactionsByMerchantIdsRow struct {
	Count      int64
	Merchantid uuid.UUID
}

func (q *Queries) CountTransactionsByMerchantIds(ctx context.Context, merchantids []string) ([]CountTransactionsByMerchantIdsRow, error) {
	rows, err := q.db.QueryContext(ctx, countTransactionsByMerchantIds, pq.Array(merchantids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CountTransactionsByMerchantIdsRow
	for rows.Next() {
		var i CountTransactionsByMerchantIdsRow
		if err := rows.Scan(&i.Count, &i.Merchantid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createAccountSyncItem = `-- name: CreateAccountSyncItem :one
INSERT INTO account_sync_items (
    accountId,
    uploadSource
)
VALUES ($1, $2)
RETURNING id, date, uploadsource, accountid
`

type CreateAccountSyncItemParams struct {
	Accountid    uuid.UUID
	Uploadsource UploadSource
}

func (q *Queries) CreateAccountSyncItem(ctx context.Context, arg CreateAccountSyncItemParams) (AccountSyncItem, error) {
	row := q.db.QueryRowContext(ctx, createAccountSyncItem, arg.Accountid, arg.Uploadsource)
	var i AccountSyncItem
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Uploadsource,
		&i.Accountid,
	)
	return i, err
}

const createFund = `-- name: CreateFund :one

INSERT INTO funds (type, name, goal, startDate, endDate, ownerId)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, type, name, goal, startdate, enddate, ownerid
`

type CreateFundParams struct {
	Type      FundType
	Name      string
	Goal      int32
	Startdate time.Time
	Enddate   sql.NullTime
	Ownerid   uuid.UUID
}

// FUNDS
func (q *Queries) CreateFund(ctx context.Context, arg CreateFundParams) (Fund, error) {
	row := q.db.QueryRowContext(ctx, createFund,
		arg.Type,
		arg.Name,
		arg.Goal,
		arg.Startdate,
		arg.Enddate,
		arg.Ownerid,
	)
	var i Fund
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Name,
		&i.Goal,
		&i.Startdate,
		&i.Enddate,
		&i.Ownerid,
	)
	return i, err
}

const createMerchant = `-- name: CreateMerchant :one
INSERT INTO merchants (
    name,
    sourceId,
    ownerId
)
VALUES ($1, $2, $3)
RETURNING id, name, sourceid, ownerid
`

type CreateMerchantParams struct {
	Name     string
	Sourceid sql.NullString
	Ownerid  uuid.UUID
}

func (q *Queries) CreateMerchant(ctx context.Context, arg CreateMerchantParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, createMerchant, arg.Name, arg.Sourceid, arg.Ownerid)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Sourceid,
		&i.Ownerid,
	)
	return i, err
}

const createMerchantKey = `-- name: CreateMerchantKey :one

INSERT INTO merchant_keys (
    keymatch,
    uploadSource,
    merchantId,
    ownerId
)
VALUES ($1, $2, $3, $4)
RETURNING id, keymatch, uploadsource, merchantid, ownerid
`

type CreateMerchantKeyParams struct {
	Keymatch     string
	Uploadsource UploadSource
	Merchantid   uuid.UUID
	Ownerid      uuid.UUID
}

// MERCHANT KEYS
func (q *Queries) CreateMerchantKey(ctx context.Context, arg CreateMerchantKeyParams) (MerchantKey, error) {
	row := q.db.QueryRowContext(ctx, createMerchantKey,
		arg.Keymatch,
		arg.Uploadsource,
		arg.Merchantid,
		arg.Ownerid,
	)
	var i MerchantKey
	err := row.Scan(
		&i.ID,
		&i.Keymatch,
		&i.Uploadsource,
		&i.Merchantid,
		&i.Ownerid,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, passwordHash)
VALUES ($1, $2, $3)
RETURNING id, role, username, email, passwordhash
`

type CreateUserParams struct {
	Username     string
	Email        string
	Passwordhash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Email, arg.Passwordhash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Username,
		&i.Email,
		&i.Passwordhash,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :one
DELETE FROM transactions
WHERE id = $1
RETURNING id, sourceid, amount, payeeid, payee, payeefull, isocurrencycode, date, description, type, checknumber, updated, merchantid, ownerid, accountid
`

func (q *Queries) DeleteTransaction(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, deleteTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Sourceid,
		&i.Amount,
		&i.Payeeid,
		&i.Payee,
		&i.Payeefull,
		&i.Isocurrencycode,
		&i.Date,
		&i.Description,
		&i.Type,
		&i.Checknumber,
		&i.Updated,
		&i.Merchantid,
		&i.Ownerid,
		&i.Accountid,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE id = $1
RETURNING id, role, username, email, passwordhash
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Username,
		&i.Email,
		&i.Passwordhash,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one

SELECT id, sourceid, type, name, routingnumber, updated, ownerid FROM accounts
WHERE id = $1 and ownerId = $2
LIMIT 1
`

type GetAccountParams struct {
	ID      uuid.UUID
	Ownerid uuid.UUID
}

// ACCOUNTS
func (q *Queries) GetAccount(ctx context.Context, arg GetAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, arg.ID, arg.Ownerid)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Sourceid,
		&i.Type,
		&i.Name,
		&i.Routingnumber,
		&i.Updated,
		&i.Ownerid,
	)
	return i, err
}

const getAccountIncome = `-- name: GetAccountIncome :one
SELECT COALESCE(SUM(amount), 0) as Sum FROM transactions
WHERE ownerId = $1 AND accountId = $2 AND amount > 0
`

type GetAccountIncomeParams struct {
	Ownerid   uuid.UUID
	Accountid uuid.UUID
}

func (q *Queries) GetAccountIncome(ctx context.Context, arg GetAccountIncomeParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getAccountIncome, arg.Ownerid, arg.Accountid)
	var sum interface{}
	err := row.Scan(&sum)
	return sum, err
}

const getAccountSpending = `-- name: GetAccountSpending :one
SELECT COALESCE(SUM(amount), 0) as Sum FROM transactions
WHERE ownerId = $1 AND accountId = $2 AND amount < 0
`

type GetAccountSpendingParams struct {
	Ownerid   uuid.UUID
	Accountid uuid.UUID
}

func (q *Queries) GetAccountSpending(ctx context.Context, arg GetAccountSpendingParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getAccountSpending, arg.Ownerid, arg.Accountid)
	var sum interface{}
	err := row.Scan(&sum)
	return sum, err
}

const getFundAllocationsStats = `-- name: GetFundAllocationsStats :one
SELECT
    COALESCE(sum(CASE WHEN a.amount > 0 THEN a.amount ELSE 0 END), 0) as saved,
    COALESCE(sum(CASE WHEN a.amount > 0 THEN a.amount ELSE 0 END), 0) as spent,
    COALESCE(sum(a.amount), 0) as net
FROM fund_allocations AS a, funds AS f
WHERE f.ownerId = $1 AND a.date <= $2
`

type GetFundAllocationsStatsParams struct {
	Ownerid uuid.UUID
	Enddate time.Time
}

type GetFundAllocationsStatsRow struct {
	Saved interface{}
	Spent interface{}
	Net   interface{}
}

func (q *Queries) GetFundAllocationsStats(ctx context.Context, arg GetFundAllocationsStatsParams) (GetFundAllocationsStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getFundAllocationsStats, arg.Ownerid, arg.Enddate)
	var i GetFundAllocationsStatsRow
	err := row.Scan(&i.Saved, &i.Spent, &i.Net)
	return i, err
}

const getFundTotal = `-- name: GetFundTotal :one
SELECT COALESCE(SUM(amount), 0) as Sum FROM fund_allocations
WHERE fundId = $1
`

func (q *Queries) GetFundTotal(ctx context.Context, fundid uuid.UUID) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getFundTotal, fundid)
	var sum interface{}
	err := row.Scan(&sum)
	return sum, err
}

const getLastSync = `-- name: GetLastSync :one

SELECT id, date, uploadsource, accountid FROM account_sync_items
WHERE accountId = $1
ORDER BY date DESC
LIMIT 1
`

// ACCOUNT SYNC ITEMS
func (q *Queries) GetLastSync(ctx context.Context, accountid uuid.UUID) (AccountSyncItem, error) {
	row := q.db.QueryRowContext(ctx, getLastSync, accountid)
	var i AccountSyncItem
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Uploadsource,
		&i.Accountid,
	)
	return i, err
}

const getMerchant = `-- name: GetMerchant :one

SELECT id, name, sourceid, ownerid FROM merchants
WHERE id = $1 and ownerId = $2
LIMIT 1
`

type GetMerchantParams struct {
	ID      uuid.UUID
	Ownerid uuid.UUID
}

// MERCHANTS
func (q *Queries) GetMerchant(ctx context.Context, arg GetMerchantParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, getMerchant, arg.ID, arg.Ownerid)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Sourceid,
		&i.Ownerid,
	)
	return i, err
}

const getMerchantByKey = `-- name: GetMerchantByKey :one
SELECT m.id, m.name, m.sourceid, m.ownerid FROM merchants AS m JOIN merchant_keys AS k ON m.id = k.merchantId
WHERE uploadSource = $1 AND keymatch LIKE $2
`

type GetMerchantByKeyParams struct {
	Uploadsource UploadSource
	Keymatch     string
}

func (q *Queries) GetMerchantByKey(ctx context.Context, arg GetMerchantByKeyParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, getMerchantByKey, arg.Uploadsource, arg.Keymatch)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Sourceid,
		&i.Ownerid,
	)
	return i, err
}

const getMerchantByName = `-- name: GetMerchantByName :one
SELECT id, name, sourceid, ownerid FROM merchants
WHERE name = $1
`

func (q *Queries) GetMerchantByName(ctx context.Context, name string) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, getMerchantByName, name)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Sourceid,
		&i.Ownerid,
	)
	return i, err
}

const getMerchantBySourceId = `-- name: GetMerchantBySourceId :one
SELECT id, name, sourceid, ownerid FROM merchants
WHERE sourceId = $1
`

func (q *Queries) GetMerchantBySourceId(ctx context.Context, sourceid sql.NullString) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, getMerchantBySourceId, sourceid)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Sourceid,
		&i.Ownerid,
	)
	return i, err
}

const getNetIncome = `-- name: GetNetIncome :one
SELECT COALESCE(SUM(amount), 0) as Sum FROM transactions
WHERE ownerId = $1 AND date BETWEEN $2 AND $3
`

type GetNetIncomeParams struct {
	Ownerid   uuid.UUID
	Startdate time.Time
	Enddate   time.Time
}

func (q *Queries) GetNetIncome(ctx context.Context, arg GetNetIncomeParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getNetIncome, arg.Ownerid, arg.Startdate, arg.Enddate)
	var sum interface{}
	err := row.Scan(&sum)
	return sum, err
}

const getTotalIncome = `-- name: GetTotalIncome :one
SELECT COALESCE(SUM(amount), 0) as Sum FROM transactions
WHERE ownerId = $1 AND amount > 0 AND date BETWEEN $2 AND $3
`

type GetTotalIncomeParams struct {
	Ownerid   uuid.UUID
	Startdate time.Time
	Enddate   time.Time
}

func (q *Queries) GetTotalIncome(ctx context.Context, arg GetTotalIncomeParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getTotalIncome, arg.Ownerid, arg.Startdate, arg.Enddate)
	var sum interface{}
	err := row.Scan(&sum)
	return sum, err
}

const getTotalSpending = `-- name: GetTotalSpending :one

SELECT COALESCE(SUM(amount), 0) as Sum FROM transactions
WHERE ownerId = $1 AND amount < 0 AND date BETWEEN $2 AND $3
`

type GetTotalSpendingParams struct {
	Ownerid   uuid.UUID
	Startdate time.Time
	Enddate   time.Time
}

// STATS
func (q *Queries) GetTotalSpending(ctx context.Context, arg GetTotalSpendingParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getTotalSpending, arg.Ownerid, arg.Startdate, arg.Enddate)
	var sum interface{}
	err := row.Scan(&sum)
	return sum, err
}

const getTransaction = `-- name: GetTransaction :one

SELECT id, sourceid, amount, payeeid, payee, payeefull, isocurrencycode, date, description, type, checknumber, updated, merchantid, ownerid, accountid FROM transactions
WHERE id = $1 and ownerId = $2
LIMIT 1
`

type GetTransactionParams struct {
	ID      uuid.UUID
	Ownerid uuid.UUID
}

// TRANSACTIONS
func (q *Queries) GetTransaction(ctx context.Context, arg GetTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, arg.ID, arg.Ownerid)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Sourceid,
		&i.Amount,
		&i.Payeeid,
		&i.Payee,
		&i.Payeefull,
		&i.Isocurrencycode,
		&i.Date,
		&i.Description,
		&i.Type,
		&i.Checknumber,
		&i.Updated,
		&i.Merchantid,
		&i.Ownerid,
		&i.Accountid,
	)
	return i, err
}

const getUser = `-- name: GetUser :one

SELECT id, role, username, email, passwordhash FROM users
WHERE id = $1
`

// USERS
func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Username,
		&i.Email,
		&i.Passwordhash,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, role, username, email, passwordhash FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Username,
		&i.Email,
		&i.Passwordhash,
	)
	return i, err
}

const listAccountIncomeTransactions = `-- name: ListAccountIncomeTransactions :many
SELECT id, sourceid, amount, payeeid, payee, payeefull, isocurrencycode, date, description, type, checknumber, updated, merchantid, ownerid, accountid FROM transactions
WHERE ownerId = $1 AND accountId = $2 AND amount >= 0
ORDER BY date
LIMIT $2 OFFSET $3
`

type ListAccountIncomeTransactionsParams struct {
	Ownerid uuid.UUID
	Limit   int32
	Start   int32
}

func (q *Queries) ListAccountIncomeTransactions(ctx context.Context, arg ListAccountIncomeTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listAccountIncomeTransactions, arg.Ownerid, arg.Limit, arg.Start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Sourceid,
			&i.Amount,
			&i.Payeeid,
			&i.Payee,
			&i.Payeefull,
			&i.Isocurrencycode,
			&i.Date,
			&i.Description,
			&i.Type,
			&i.Checknumber,
			&i.Updated,
			&i.Merchantid,
			&i.Ownerid,
			&i.Accountid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccountSpendingTransactions = `-- name: ListAccountSpendingTransactions :many
SELECT id, sourceid, amount, payeeid, payee, payeefull, isocurrencycode, date, description, type, checknumber, updated, merchantid, ownerid, accountid FROM transactions
WHERE ownerId = $1 AND accountId = $2 AND amount < 0
ORDER BY date DESC
LIMIT $2 OFFSET $3
`

type ListAccountSpendingTransactionsParams struct {
	Ownerid uuid.UUID
	Limit   int32
	Start   int32
}

func (q *Queries) ListAccountSpendingTransactions(ctx context.Context, arg ListAccountSpendingTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listAccountSpendingTransactions, arg.Ownerid, arg.Limit, arg.Start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Sourceid,
			&i.Amount,
			&i.Payeeid,
			&i.Payee,
			&i.Payeefull,
			&i.Isocurrencycode,
			&i.Date,
			&i.Description,
			&i.Type,
			&i.Checknumber,
			&i.Updated,
			&i.Merchantid,
			&i.Ownerid,
			&i.Accountid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, sourceid, type, name, routingnumber, updated, ownerid FROM accounts AS a
WHERE ownerId = $1
ORDER BY a.name
LIMIT $2 OFFSET $3
`

type ListAccountsParams struct {
	Ownerid uuid.UUID
	Limit   int32
	Start   int32
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Ownerid, arg.Limit, arg.Start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Sourceid,
			&i.Type,
			&i.Name,
			&i.Routingnumber,
			&i.Updated,
			&i.Ownerid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBudgetFunds = `-- name: ListBudgetFunds :many
SELECT id, type, name, goal, startdate, enddate, ownerid FROM funds
WHERE ownerId = $1 AND type = 'BUDGET'
ORDER BY name
LIMIT $2 OFFSET $3
`

type ListBudgetFundsParams struct {
	Ownerid uuid.UUID
	Limit   int32
	Start   int32
}

func (q *Queries) ListBudgetFunds(ctx context.Context, arg ListBudgetFundsParams) ([]Fund, error) {
	rows, err := q.db.QueryContext(ctx, listBudgetFunds, arg.Ownerid, arg.Limit, arg.Start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Fund
	for rows.Next() {
		var i Fund
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Name,
			&i.Goal,
			&i.Startdate,
			&i.Enddate,
			&i.Ownerid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFundAllocationsByFundIds = `-- name: ListFundAllocationsByFundIds :many

SELECT a.id, a.description, a.amount, a.date, a.ownerid, a.fundid FROM fund_allocations AS a, funds AS f
WHERE a.fundId = f.id
    AND f.id::varchar = ANY($2::varchar[])
ORDER BY date DESC
LIMIT $1 OFFSET $3
`

type ListFundAllocationsByFundIdsParams struct {
	Limit   int32
	Fundids []string
	Start   int32
}

// FUND ALLOCATIONS
func (q *Queries) ListFundAllocationsByFundIds(ctx context.Context, arg ListFundAllocationsByFundIdsParams) ([]FundAllocation, error) {
	rows, err := q.db.QueryContext(ctx, listFundAllocationsByFundIds, arg.Limit, pq.Array(arg.Fundids), arg.Start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FundAllocation
	for rows.Next() {
		var i FundAllocation
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Amount,
			&i.Date,
			&i.Ownerid,
			&i.Fundid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listIncomeTransactions = `-- name: ListIncomeTransactions :many
SELECT id, sourceid, amount, payeeid, payee, payeefull, isocurrencycode, date, description, type, checknumber, updated, merchantid, ownerid, accountid FROM transactions
WHERE ownerId = $1
    AND amount >= 0 AND date BETWEEN $3 AND $4
ORDER BY date DESC
LIMIT $2 OFFSET $5
`

type ListIncomeTransactionsParams struct {
	Ownerid   uuid.UUID
	Limit     int32
	Startdate time.Time
	Enddate   time.Time
	Start     int32
}

func (q *Queries) ListIncomeTransactions(ctx context.Context, arg ListIncomeTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listIncomeTransactions,
		arg.Ownerid,
		arg.Limit,
		arg.Startdate,
		arg.Enddate,
		arg.Start,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Sourceid,
			&i.Amount,
			&i.Payeeid,
			&i.Payee,
			&i.Payeefull,
			&i.Isocurrencycode,
			&i.Date,
			&i.Description,
			&i.Type,
			&i.Checknumber,
			&i.Updated,
			&i.Merchantid,
			&i.Ownerid,
			&i.Accountid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMerchants = `-- name: ListMerchants :many
SELECT id, name, sourceid, ownerid FROM merchants
WHERE ownerId = $1
ORDER BY name
LIMIT $2 OFFSET $3
`

type ListMerchantsParams struct {
	Ownerid uuid.UUID
	Limit   int32
	Start   int32
}

func (q *Queries) ListMerchants(ctx context.Context, arg ListMerchantsParams) ([]Merchant, error) {
	rows, err := q.db.QueryContext(ctx, listMerchants, arg.Ownerid, arg.Limit, arg.Start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Merchant
	for rows.Next() {
		var i Merchant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Sourceid,
			&i.Ownerid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMerchantsByMerchantIds = `-- name: ListMerchantsByMerchantIds :many
SELECT m.id, m.name, m.sourceid, m.ownerid FROM transactions AS t, merchants AS m
WHERE t.merchantId = m.id AND m.id::varchar = ANY($1::varchar[])
ORDER BY date DESC
`

func (q *Queries) ListMerchantsByMerchantIds(ctx context.Context, merchantids []string) ([]Merchant, error) {
	rows, err := q.db.QueryContext(ctx, listMerchantsByMerchantIds, pq.Array(merchantids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Merchant
	for rows.Next() {
		var i Merchant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Sourceid,
			&i.Ownerid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMonths = `-- name: ListMonths :many

SELECT EXTRACT(YEAR FROM t.date) AS year,
       EXTRACT(MONTH FROM t.date) AS month,
       COUNT(*) AS count
FROM transactions AS t
WHERE ownerId = $1
GROUP BY EXTRACT(YEAR FROM t.date), EXTRACT(MONTH FROM t.date)
ORDER BY year DESC, month DESC
`

type ListMonthsRow struct {
	Year  string
	Month string
	Count int64
}

// MONTHS
func (q *Queries) ListMonths(ctx context.Context, ownerid uuid.UUID) ([]ListMonthsRow, error) {
	rows, err := q.db.QueryContext(ctx, listMonths, ownerid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMonthsRow
	for rows.Next() {
		var i ListMonthsRow
		if err := rows.Scan(&i.Year, &i.Month, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSavingsFunds = `-- name: ListSavingsFunds :many
SELECT id, type, name, goal, startdate, enddate, ownerid FROM funds
WHERE ownerId = $1 AND type = 'SAVINGS'
ORDER BY name
LIMIT $2 OFFSET $3
`

type ListSavingsFundsParams struct {
	Ownerid uuid.UUID
	Limit   int32
	Start   int32
}

func (q *Queries) ListSavingsFunds(ctx context.Context, arg ListSavingsFundsParams) ([]Fund, error) {
	rows, err := q.db.QueryContext(ctx, listSavingsFunds, arg.Ownerid, arg.Limit, arg.Start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Fund
	for rows.Next() {
		var i Fund
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Name,
			&i.Goal,
			&i.Startdate,
			&i.Enddate,
			&i.Ownerid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpendingTransactions = `-- name: ListSpendingTransactions :many
SELECT id, sourceid, amount, payeeid, payee, payeefull, isocurrencycode, date, description, type, checknumber, updated, merchantid, ownerid, accountid FROM transactions
WHERE ownerId = $1
    AND amount < 0
    AND date BETWEEN $2 AND $3
ORDER BY date DESC
LIMIT $1 OFFSET $4
`

type ListSpendingTransactionsParams struct {
	Limit     int32
	Startdate time.Time
	Enddate   time.Time
	Start     int32
}

func (q *Queries) ListSpendingTransactions(ctx context.Context, arg ListSpendingTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listSpendingTransactions,
		arg.Limit,
		arg.Startdate,
		arg.Enddate,
		arg.Start,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Sourceid,
			&i.Amount,
			&i.Payeeid,
			&i.Payee,
			&i.Payeefull,
			&i.Isocurrencycode,
			&i.Date,
			&i.Description,
			&i.Type,
			&i.Checknumber,
			&i.Updated,
			&i.Merchantid,
			&i.Ownerid,
			&i.Accountid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, sourceid, amount, payeeid, payee, payeefull, isocurrencycode, date, description, type, checknumber, updated, merchantid, ownerid, accountid FROM transactions
WHERE ownerId = $1
ORDER BY date DESC
LIMIT $2 OFFSET $3
`

type ListTransactionsParams struct {
	Ownerid uuid.UUID
	Limit   int32
	Start   int32
}

func (q *Queries) ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions, arg.Ownerid, arg.Limit, arg.Start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Sourceid,
			&i.Amount,
			&i.Payeeid,
			&i.Payee,
			&i.Payeefull,
			&i.Isocurrencycode,
			&i.Date,
			&i.Description,
			&i.Type,
			&i.Checknumber,
			&i.Updated,
			&i.Merchantid,
			&i.Ownerid,
			&i.Accountid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByAccountIds = `-- name: ListTransactionsByAccountIds :many
SELECT t.id, t.sourceid, t.amount, t.payeeid, t.payee, t.payeefull, t.isocurrencycode, t.date, t.description, t.type, t.checknumber, t.updated, t.merchantid, t.ownerid, t.accountid FROM transactions AS t, accounts AS a
WHERE t.accountId = a.id
    AND a.id::varchar = ANY($2::varchar[])
ORDER BY date DESC
LIMIT $1 OFFSET $3
`

type ListTransactionsByAccountIdsParams struct {
	Limit      int32
	Accountids []string
	Start      int32
}

func (q *Queries) ListTransactionsByAccountIds(ctx context.Context, arg ListTransactionsByAccountIdsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionsByAccountIds, arg.Limit, pq.Array(arg.Accountids), arg.Start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Sourceid,
			&i.Amount,
			&i.Payeeid,
			&i.Payee,
			&i.Payeefull,
			&i.Isocurrencycode,
			&i.Date,
			&i.Description,
			&i.Type,
			&i.Checknumber,
			&i.Updated,
			&i.Merchantid,
			&i.Ownerid,
			&i.Accountid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByDates = `-- name: ListTransactionsByDates :many
SELECT id, sourceid, amount, payeeid, payee, payeefull, isocurrencycode, date, description, type, checknumber, updated, merchantid, ownerid, accountid FROM transactions
WHERE ownerId = $1 AND date BETWEEN $3 AND $4
ORDER BY date DESC
LIMIT $2 OFFSET $5
`

type ListTransactionsByDatesParams struct {
	Ownerid   uuid.UUID
	Limit     int32
	Startdate time.Time
	Enddate   time.Time
	Start     int32
}

func (q *Queries) ListTransactionsByDates(ctx context.Context, arg ListTransactionsByDatesParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionsByDates,
		arg.Ownerid,
		arg.Limit,
		arg.Startdate,
		arg.Enddate,
		arg.Start,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Sourceid,
			&i.Amount,
			&i.Payeeid,
			&i.Payee,
			&i.Payeefull,
			&i.Isocurrencycode,
			&i.Date,
			&i.Description,
			&i.Type,
			&i.Checknumber,
			&i.Updated,
			&i.Merchantid,
			&i.Ownerid,
			&i.Accountid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByMerchantIds = `-- name: ListTransactionsByMerchantIds :many
SELECT t.id, t.sourceid, t.amount, t.payeeid, t.payee, t.payeefull, t.isocurrencycode, t.date, t.description, t.type, t.checknumber, t.updated, t.merchantid, t.ownerid, t.accountid FROM transactions AS t, merchants AS m
WHERE t.merchantId = m.id
    AND m.id::varchar = ANY($2::varchar[])
ORDER BY date DESC
LIMIT $1 OFFSET $3
`

type ListTransactionsByMerchantIdsParams struct {
	Limit       int32
	Merchantids []string
	Start       int32
}

func (q *Queries) ListTransactionsByMerchantIds(ctx context.Context, arg ListTransactionsByMerchantIdsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionsByMerchantIds, arg.Limit, pq.Array(arg.Merchantids), arg.Start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Sourceid,
			&i.Amount,
			&i.Payeeid,
			&i.Payee,
			&i.Payeefull,
			&i.Isocurrencycode,
			&i.Date,
			&i.Description,
			&i.Type,
			&i.Checknumber,
			&i.Updated,
			&i.Merchantid,
			&i.Ownerid,
			&i.Accountid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET amount = $3
WHERE id = $1 AND ownerId = $2
RETURNING id, sourceid, amount, payeeid, payee, payeefull, isocurrencycode, date, description, type, checknumber, updated, merchantid, ownerid, accountid
`

type UpdateTransactionParams struct {
	ID      uuid.UUID
	Ownerid uuid.UUID
	Amount  int32
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransaction, arg.ID, arg.Ownerid, arg.Amount)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Sourceid,
		&i.Amount,
		&i.Payeeid,
		&i.Payee,
		&i.Payeefull,
		&i.Isocurrencycode,
		&i.Date,
		&i.Description,
		&i.Type,
		&i.Checknumber,
		&i.Updated,
		&i.Merchantid,
		&i.Ownerid,
		&i.Accountid,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $2, email = $3
WHERE id = $1
RETURNING id, role, username, email, passwordhash
`

type UpdateUserParams struct {
	ID       uuid.UUID
	Username string
	Email    string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Username,
		&i.Email,
		&i.Passwordhash,
	)
	return i, err
}

const upsertAccount = `-- name: UpsertAccount :one
INSERT INTO accounts (
    sourceId,
    type,
    name,
    routingNumber,
    updated,
    ownerId
)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (sourceId) DO UPDATE
SET
    type = $2,
    name = $3,
    routingNumber = $4,
    updated = $5
RETURNING id, sourceid, type, name, routingnumber, updated, ownerid
`

type UpsertAccountParams struct {
	Sourceid      string
	Type          AccountType
	Name          string
	Routingnumber sql.NullString
	Updated       time.Time
	Ownerid       uuid.UUID
}

// WHERE ownerId = $7 -- HOW DO WE INCLUDE OWNER ID FOR UPDATE
func (q *Queries) UpsertAccount(ctx context.Context, arg UpsertAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, upsertAccount,
		arg.Sourceid,
		arg.Type,
		arg.Name,
		arg.Routingnumber,
		arg.Updated,
		arg.Ownerid,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Sourceid,
		&i.Type,
		&i.Name,
		&i.Routingnumber,
		&i.Updated,
		&i.Ownerid,
	)
	return i, err
}

const upsertTransaction = `-- name: UpsertTransaction :one
INSERT INTO transactions (
    sourceId,
    amount,
    payeeId,
    payee,
    payeeFull,
    isoCurrencyCode,
    date,
    description,
    type,
    checkNumber,
    updated,
    ownerId,
    accountId,
    merchantId
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
ON CONFLICT (sourceId) DO UPDATE
SET
    amount = $2,
    payeeId = $3,
    payee = $4,
    payeeFull = $5,
    isoCurrencyCode = $6,
    date = $7,
    description = $8,
    type = $9,
    checkNumber = $10,
    updated = $11
RETURNING id, sourceid, amount, payeeid, payee, payeefull, isocurrencycode, date, description, type, checknumber, updated, merchantid, ownerid, accountid
`

type UpsertTransactionParams struct {
	Sourceid        string
	Amount          int32
	Payeeid         sql.NullString
	Payee           sql.NullString
	Payeefull       sql.NullString
	Isocurrencycode string
	Date            time.Time
	Description     string
	Type            TransactionType
	Checknumber     sql.NullString
	Updated         time.Time
	Ownerid         uuid.UUID
	Accountid       uuid.UUID
	Merchantid      uuid.UUID
}

// WHERE ownerId = $13 -- HOW DO WE INCLUDE OWNER ID FOR UPDATE, NO VALIDATION
func (q *Queries) UpsertTransaction(ctx context.Context, arg UpsertTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, upsertTransaction,
		arg.Sourceid,
		arg.Amount,
		arg.Payeeid,
		arg.Payee,
		arg.Payeefull,
		arg.Isocurrencycode,
		arg.Date,
		arg.Description,
		arg.Type,
		arg.Checknumber,
		arg.Updated,
		arg.Ownerid,
		arg.Accountid,
		arg.Merchantid,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Sourceid,
		&i.Amount,
		&i.Payeeid,
		&i.Payee,
		&i.Payeefull,
		&i.Isocurrencycode,
		&i.Date,
		&i.Description,
		&i.Type,
		&i.Checknumber,
		&i.Updated,
		&i.Merchantid,
		&i.Ownerid,
		&i.Accountid,
	)
	return i, err
}
